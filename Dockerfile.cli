# `python-base` sets up all our shared environment variables
FROM python:3.12-slim AS build

    # python no pyc files + pip longer timeout
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    \
    PIP_DEFAULT_TIMEOUT=100 \
    \
    # poetry fix bin path
    POETRY_VERSION=2.1.1 \
    POETRY_HOME="/opt/poetry" \
    \
    # Poetry can create a venv for you, but it will be a random venv name 
    # You could also have POETRY_VIRTUALENVS_IN_PROJECT=1 to get a deterministic venv name
    # but it will be in the project directory, which might cause problem if you wanna mount your project in dev
    # Instead we create/activate our own venv in a known location, prompting poetry to use it
    # Once poetry lets us set the venv name in its confing, we can remove this 
    # Ref: https://github.com/python-poetry/poetry/issues/263#issuecomment-1404129650
    VIRTUAL_ENV="/opt/pysetup/venv"

# create the venv and activate it
RUN python -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# install poetry 
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
        curl \
        build-essential
# use official curl to respect $POETRY_VERSION & $POETRY_HOME
# (pip install poetry doesn't respect $POETRY_HOME)
RUN curl -sSL https://install.python-poetry.org | python3 -
ENV PATH="$POETRY_HOME/bin:$PATH"

WORKDIR /app
COPY poetry.lock pyproject.toml ./
# CLI and command (root) ONLY
# Dummy README to satisfy Poetry
# Use touch to avoid cache busting on real README changes
RUN touch README.md
COPY cardwise/ cardwise/
RUN poetry install --with cli,ingestion

# === Runtime stage ===
FROM python:3.12-slim AS runtime

# Same env setup
ENV VIRTUAL_ENV="/opt/pysetup/venv"

ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Copy virtualenv and backend code from build stage
COPY --from=build $VIRTUAL_ENV $VIRTUAL_ENV
WORKDIR /app
COPY cli/ cli/
COPY cardwise/ cardwise/
COPY ingestion/ ingestion/

# Start ingestion script
ENTRYPOINT ["cardwise"]
CMD ["search", "run", "shake shak"]