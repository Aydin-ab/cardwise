[project]
name = "cardwise"
version = "0.0.4"
description = "A package to find the best card to use for your purchase"
authors = [
    { name = "Aydin Abiar", email = "aydinabiar@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.10"
keywords = ["credit-card", "couponing", "cardwise"]
# classifiers property is dynamic because we want to create Python classifiers automatically
# dependencies are dynamic because we want to keep Poetry's rich dependency definition format
dynamic = ["classifiers", "dependencies"]

[project.urls]
#homepage = "https://python-foobar.org/"
repository = "https://github.com/Aydin-ab/cardwise"
#documentation = "https://python-foobar.org/docs"

[tool.poetry]
packages = [{ include = "cardwise", from = "src" }]
classifiers = [ # TODO
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.8" # Exporting the requirements to requirements.txt : poetry export --without-hashes --output requirements.txt

[tool.poetry.dependencies]
python = ">=3.10,<4.0" # use if you want to add a upper bound
beautifulsoup4 = "^4.13.3"
rapidfuzz = "^3.12.2"
requests = "^2.32.3"
python-dotenv = "^1.0.1"
watchdog = "^6.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
pytest-benchmark = "*"
pytest-cov = "*"
ruff = "*"
pyright = "*"
pre-commit = "*"
tox = "^4.24.2"
pip-audit = "^2.8.0"
trufflehog = "^2.2.1"
python-semantic-release = "^9.21.0"

[tool.poetry.scripts]
search_offers = "cardwise.bank_parser.search_offers:main"

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]

[tool.ruff]
line-length = 120  # Matches `black`
indent-width = 4
target-version = "py310"  # Python version

[tool.ruff.lint]
select = ["E", "F", "W", "I", "S"]  # Enable linting + import sorting
fixable = ["ALL"]  # Auto-fix everything

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S603", "S607"]

[tool.ruff.format]
quote-style = "double"  # Optional: use double quotes
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
include = ["src", "tests"]
pythonVersion = "3.10"
typeCheckingMode = "strict"
reportMissingTypeStubs = false

[tool.tox]
env_list = ["py310", "py311", "py312", "py313", "lint", "type"] 
skip_missing_interpreters = false

[tool.tox.env_run_base] # Use this for a Base Test Configuration for all py3x versions (except py310)
description = "Build package with poetry and this python3.x"
skip_install = true
allowlist_externals = ["poetry"]
commands_pre = [["poetry", "install"]]
commands = [["poetry", "build"]]
#package = "editable" 

# We run tests only in the 3.10 version to save time
[tool.tox.env.py310]
description = "Run tests with pytest with Python 3.10"
skip_install = true
allowlist_externals = ["poetry"]
commands_pre = [["poetry", "install"]]
#package = "editable"  # Install local package in editable mode `pip install -e .`
#deps = ["pytest", "pytest-cov", "pytest-benchmark"]
commands = [["poetry", "run", "pytest"]]

[tool.tox.env.lint]
description = "Run Ruff for linting"
skip_install = true
allowlist_externals = ["poetry"]
commands_pre = [["poetry", "install"]]
commands = [["poetry", "run", "ruff", "check", "."]]

[tool.tox.env.type]
description = "Run Pyright for type checking"
skip_install = true
allowlist_externals = ["poetry"]
commands_pre = [["poetry", "install"]]
commands = [["poetry", "run", "pyright"]]

[tool.semantic_release]
version_toml = [
    # "file:variable:[format_type]"
    "pyproject.toml:project.version",  # Implied Default: Number format
]
commit_message = "ci: bump v{version}"
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "pip install poetry && poetry build"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"